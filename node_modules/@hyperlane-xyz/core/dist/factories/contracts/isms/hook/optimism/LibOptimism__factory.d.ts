import type { LibOptimism, LibOptimismInterface } from "../../../../../contracts/isms/hook/optimism/LibOptimism";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, ContractFactory, Overrides } from "ethers";
declare type LibOptimismConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LibOptimism__factory extends ContractFactory {
    constructor(...args: LibOptimismConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<LibOptimism>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): LibOptimism;
    connect(signer: Signer): LibOptimism__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd02514cad8e588ecdc5383ebe17c462ec8b359e599f21a3d1ca2dd2a8143d2d64736f6c63430008110033";
    static readonly abi: {
        inputs: never[];
        name: string;
        type: string;
    }[];
    static createInterface(): LibOptimismInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LibOptimism;
}
export {};
//# sourceMappingURL=LibOptimism__factory.d.ts.map