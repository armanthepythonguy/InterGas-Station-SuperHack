import { ChainName } from '../../types';
export declare const hyperlaneEnvironments: {
    test: {
        test1: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
        test2: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
        test3: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            legacyMultisigIsm: string;
            merkleRootMultisigIsm: string;
            messageIdMultisigIsm: string;
            aggregationIsm: string;
            routingIsm: string;
        };
    };
    testnet: {
        alfajores: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        fuji: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        mumbai: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        bsctestnet: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        goerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        moonbasealpha: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainAccountIsm: string;
            interchainAccountRouter: string;
        };
        optimismgoerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        arbitrumgoerli: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        sepolia: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
    };
    mainnet: {
        celo: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        ethereum: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        avalanche: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        polygon: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        bsc: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        arbitrum: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
            timelockController: string;
        };
        optimism: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        moonbeam: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
        gnosis: {
            storageGasOracle: string;
            validatorAnnounce: string;
            proxyAdmin: string;
            mailbox: string;
            interchainGasPaymaster: string;
            defaultIsmInterchainGasPaymaster: string;
            multisigIsm: string;
            create2Factory: string;
            testRecipient: string;
            interchainAccountIsm: string;
            aggregationIsmFactory: string;
            routingIsmFactory: string;
            interchainQueryRouter: string;
            interchainAccountRouter: string;
        };
    };
};
export declare type HyperlaneEnvironment = keyof typeof hyperlaneEnvironments;
export declare type HyperlaneEnvironmentChain<E extends HyperlaneEnvironment> = Extract<keyof typeof hyperlaneEnvironments[E], ChainName>;
export declare const hyperlaneContractAddresses: Record<"polygon" | "ethereum" | "test1" | "test2" | "test3" | "alfajores" | "arbitrum" | "arbitrumgoerli" | "avalanche" | "bsc" | "bsctestnet" | "celo" | "fuji" | "goerli" | "sepolia" | "moonbasealpha" | "moonbeam" | "mumbai" | "optimism" | "optimismgoerli" | "gnosis" | "solanadevnet" | "zbctestnet", {
    storageGasOracle: string;
    validatorAnnounce: string;
    proxyAdmin: string;
    mailbox: string;
    interchainGasPaymaster: string;
    defaultIsmInterchainGasPaymaster: string;
    multisigIsm: string;
    testRecipient: string;
    interchainAccountIsm: string;
    aggregationIsmFactory: string;
    routingIsmFactory: string;
    interchainQueryRouter: string;
    interchainAccountRouter: string;
}>;
//# sourceMappingURL=index.d.ts.map